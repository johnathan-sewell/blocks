/// Asset URL builder
/// @access private
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the asset

@function asset($type, $file) {
  @return url($asset-base-path + "/" + $type + "/" + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset

@function image($file) {
  @return asset("images", $file);
}

/// SVG asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset

@function svg($file) {
  @return asset("svg", $file);
}

/// - Returns a dark or light color based on input (background) color
/// @name forecolor
/// @group functions
/// @author Mads Stoumann
/// @param {String} $color

@function color($bgcolor, $color-dark : #111111, $color-light: #fefefe) {
	@if (lightness($bgcolor) > 50) {
		@return $color-dark;
	} @else {
		@return $color-light;
	}
}

/// - Checks if $value is numeric
/// @name is-valid-length
/// @group functions
/// @author Hugo Giraudel
/// @param {length} $value - Value to check

@function is-valid-length($value) {
	@return (type-of($value) == "number" and not unitless($value)) 
    or (index(auto initial inherit 0, $value) != false);
}

/// - Returns a random color
/// @name randomColor
/// @group functions
/// @author Mads Stoumann

@function randomColor() {
	// @return rgb(random(256)-1, random(256)-1, random(256)-1);
	@return hsl(random(361)-1, 50%, 75%);
}

/// - Replace $search with $replace in $string
/// @name str-replace
/// @group functions
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace [''] - New value
/// @return {String} - Updated string

@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

/// - Returns the right-part of a split on $string using $delimiter to split
/// @name str-split
/// @group functions
/// @author Mads Stoumann
/// @param {String} $string - String to split
/// @param {String} $delimiter - String to use as a delimiter to split $string

@function str-split($string, $delimiter) {
	@if str-length($delimiter) != "" {
		$index: str-index($string, $delimiter);
		@if $index { @return str-slice($string, $index); }
	}
	@return $string
}

/// - Retrieves a subkey from a theme-map
/// @name theme
/// @group functions
/// @author Mads Stoumann
/// @param {String} $theme - Theme-map to use
/// @param {String} $property - Property of theme-map, ie. "default", "custom" etc.
/// @param {String} $key - Lookup-key

@function theme($theme, $property, $key) {
  @return map-get(map-get($theme, $property), $key);
}

/// - Retrieves a subkey from the $zindex-map in *_config.scss*
/// @name z
/// @group functions
/// @author Hugo Giraudel
/// @param {String} $layer - Value to return, i.e "popup", "menu" etc.

@function z($layer) {
	@return map-get($zindex, $layer);
}