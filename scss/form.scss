/// Returns a button-group
/// version 1.4.0
/// 2016-04-04
/// @name button
/// @group form
/// @author Mads Stoumann
/// @param {String} $theme - The theme-map to use
/// @param {String} $prop ["default"] - The property in the theme-map to use, defaults to "default"
/// @param {Boolean} $noMinWidth [true] - No default min-width specified, else take min-width from current theme
/// @output class-module

@mixin button ($theme, $prop, $minWidth : true) {
	font: theme($theme, $prop, "button-font");
	padding: theme($theme, $prop, "button-padding");
	cursor: pointer;
	text-align: center;
	text-transform: theme($theme, $prop, "button-text-transform");
	color: theme($theme, $prop, "button-color");
	border: 1px solid theme($theme, $prop, "button-border-color");
	border-radius: theme($theme, $prop, "button-border-radius");
	background: theme($theme, $prop, "button-background");
	outline: 0;
	&:focus {
		background: theme($theme, $prop, "button-hover-background");
	}
	@include hover {
		background: theme($theme, $prop, "button-hover-background");
		color: theme($theme, $prop, "button-hover-color");
	}
	@include for("phablet") {
		@if $minWidth == true { min-width: theme($theme, $prop, "button-minwidth"); }
	}
}

/// Returns a button-group
/// version 1.2.2
/// 2016-04-04
/// @name button-group
/// @group form
/// @author Mads Stoumann
/// @param {String} $theme - The theme-map to use
/// @param {String} $prop ["default"] - The property in the theme-map to use, defaults to "default"
/// @param {Boolean} $table [true] - Use table-based layout, table-layout: fixed
/// @output class-module

@mixin button-group($theme, $prop, $table : true) {
	@if $table == true {
		display: table;
		width: 100%;
		table-layout: fixed;
		white-space: nowrap;
		[type="radio"] { display: none; }
		&-nav {	display: table-row; }
		.form-label { margin: theme($theme, $prop, "button-group-label-margin") }
	}
	label {
		@if $table == true { @include button($theme, $prop, false); display: table-cell; } @else { @include button($theme, $prop, true); float: left; }
		border-right-width: 0;
		border-radius: 0;
		@if $prop == "default" { border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25); }
		&:first-of-type { border-radius: theme($theme, $prop, "button-group-first-border-radius"); }
		&:last-of-type { border-right-width: 1px; border-radius: theme($theme, $prop, "button-group-last-border-radius"); }	
	}
	.state:checked + label {
		background: theme($theme, $prop, "button-hover-background");
		color: theme($theme, $prop, "button-hover-color");
	}	
}

/// @name form
/// @group form
/// @author Mads Stoumann
/// @param {String} $theme - The theme-map to use, defaults to $form
/// @param {String} $prop ["default"] - The property in the theme-map to use, defaults to "default"
/// @param {Length} $num-steps
/// @output class-module
/// version 1.5.2
/// 2016-02-26

/// @example scss
/// .form { @include form(); }

@mixin form($theme : $form, $prop : "default", $num-steps : 1) {
	$root: &;
	
	:disabled, [disabled], [aria-disabled="true"] {
    	cursor: not-allowed;
	}
	:focus:required:invalid {
		background-image: url(#{theme($theme, $prop, "svg-invalid")});
		outline-color: theme($theme, $prop, "validation-valid-background");;
	}
	:required, :required:valid, :focus:required:invalid {
		background-position: right 1rem center;
		background-repeat: no-repeat;
		background-size: 1rem 1rem; 
		Padding-right: 3rem;
	}
	:required {
		background-image: url(#{theme($theme, $prop, "svg-required")});
		& + label::after { content: "\a0*"; }
	}
	
	:required:valid {
		background-image: url(#{theme($theme, $prop, "svg-valid")});
		border-color: theme($theme, $prop, "validation-valid-background");
		outline-color: theme($theme, $prop, "validation-valid-background");
	}	
	
	margin: 1.5%;
	font: theme($theme, $prop, "form-font");
	
	&-button {
		@include button($theme, $prop);
		&-group {
			@include button-group($theme, $prop);
		}
	}
	&-checkbox,
	&-radio {
		position: absolute;
		clip: rect(0,0,0,0);
		& + label {
			position: relative;
			font-size: theme($theme, $prop, "label-font-size");
			font-weight: 400;
			&::before {
				display: inline-block;
				width: (theme($theme, $prop, "label-font-size")*2);
				height: (theme($theme, $prop, "label-font-size")*2);
				margin: 0 theme($theme, $prop, "label-font-size") 0 0;	
				content: "\a0";
				text-align: center;
				vertical-align: middle;
				border: 2px solid theme($theme, $prop, "check-border-color");
				border-radius: 50%;
			}
		}
		&:focus + label {
			text-decoration: underline solid theme($theme, $prop, "check-background");
		}
	}
	&-checkbox {
		& + label::before { 
			border-radius: .25em; 
		}
		&:checked + label::before {
			padding-top: 1px; 
			content: "\2713"; 
			color: theme($theme, $prop, "check-color");
			border-color: theme($theme, $prop, "check-background");
			background: theme($theme, $prop, "check-background");
		}
	}
	&-radio:checked + label {
		&::before { 
			border-color: theme($theme, $prop, "check-background");
			background: theme($theme, $prop, "check-background");
			box-shadow: inset 0 0 0 .25rem #fff;
		}
	}	
	&-fieldset {
		display: none;
		margin: 2.5% 0;
		border: theme($theme, $prop, "fieldset-border-width") solid theme($theme, $prop, "fieldset-border-color");
		border-radius: theme($theme, $prop, "fieldset-border-radius");
		background: theme($theme, $prop, "fieldset-background");
	}
	&-input {
		font: theme($theme, $prop, "form-font");
		font-size: theme($theme, $prop, "input-font-size");
		width: 100%;
		margin: theme($theme, $prop, "input-margin");
		padding: theme($theme, $prop, "input-padding");
		border: 1px solid theme($theme, $prop, "input-border-color");
		border-radius: theme($theme, $prop, "input-border-radius");
		outline: none;
		
		& + label {
			@include absolute(top 0);
			display: block;
			& + hr {
				width: 100%;
				position: relative;
				border-bottom: 1px solid theme($theme, $prop, "hr-color");
				margin: 0;
				&:before,
				&:after {
					@include absolute(bottom 0);
					content: "";
					height: 1px;
					width: 0%;
					background: theme($theme, $prop, "label-focus");
					transition: all .3s;
				}
				&::after { right: 50%; }
				&::before {	left: 50%; }
			}
		}
		&::-ms-input-placeholder { color: theme($theme, $prop, "placeholder-color"); }
		&::-moz-placeholder { color: theme($theme, $prop, "placeholder-color"); }
		&::-webkit-input-placeholder { color: theme($theme, $prop, "placeholder-color"); }
		&:focus {
			box-shadow: theme($theme, $prop, "input-focus");
			&::-ms-input-placeholder { color: theme($theme, $prop, "placeholder-color-focus"); }
			&::-moz-placeholder { color: theme($theme, $prop, "placeholder-color-focus"); }
			&::-webkit-input-placeholder { color: theme($theme, $prop, "placeholder-color-focus"); }
			& + label {
				color: theme($theme, $prop, "label-focus");
				& + hr {
			 		border-bottom-width: 0;
					&::after,
					&::before {
						width: 50%;
					}
				}
			}
		}	
	}
	select#{$root}-input{
		// TODO: Fixed height for iOS. Test.
		//-webkit-appearance: menulist-button;
		line-height: 1.6;
	}
	&-label  {
		display: block;
		margin: theme($theme, $prop, "label-margin");
		cursor: pointer;
		font-weight: 400;
		font-size: theme($theme, $prop, "label-font-size");
		color: theme($theme, $prop, "label-color");
		&[data-valid="false"]::after {
			font-size: small;
			display: block;
			margin: 0 0 1.5% 0;
			padding: 0.5rem;	
			content: attr(data-invalid-text);
			color: #fff;
			border-radius: .5rem;
			background-color: theme($theme, $prop, "validation-invalid");
		}
	}
	&-legend {
		font: inherit;
		font-size: theme($theme, $prop, "legend-font-size");
		margin: theme($theme, $prop, "legend-margin");
		padding: theme($theme, $prop, "input-padding");
		color: theme($theme, $prop, "legend-color");
		border-radius: theme($theme, $prop, "input-border-radius");
		background: theme($theme, $prop, "legend-background");
	}
	&-li {
		position: relative;
		float: left;
		width: 100%;
		list-style-type: none;
		padding: theme($theme, $prop, "list-padding");
		margin: theme($theme, $prop, "list-margin");
		
		&.clear { clear: both; }
		&.checkbox-wrapper { padding-top: theme($theme, $prop, "wrapper-check-padding"); }
		&.radio-wrapper { padding-top: theme($theme, $prop, "wrapper-radio-padding"); }
		
		&.w25 { width: 50%;  @include for("tablet") { width: 25%; } }
		&.w33 { width: 50%;  @include for("tablet") { width: 33%; } }
		&.w50 { width: 100%; @include for("tablet") { width: 50%; } }
		&.w66 { width: 100%; @include for("tablet") { width: 66%; } }
		&.w75 { width: 100%; @include for("tablet") { width: 75%; } }
	}
	&-nav {
		&-next {
			float: right;
		}
		&-prev {
			float: left;
		}
		&-submit {
			background-color: theme($theme, $prop, "validation-valid-background");
			color: theme($theme, $prop, "validation-valid-color");
  			float: right;
		}
		&-next, &-prev, &-submit {
			width: 47.5%;
			margin: 2.5% 0;	
			@include for("phablet") {
				width: auto;
				min-width: theme($theme, $prop, "button-minwidth");
				margin: 1.25% 0;
			}
		}
	}
	&-range { 
		@include range(
			100%, 
			theme($theme, $prop, "label-font-size"), 
			theme($theme, $prop, "range-track-color"),
			theme($theme, $prop, "range-highlight-color"),
			theme($theme, $prop, "range-handle-color"),
			theme($theme, $prop, "range-label-color")
		); 
	}
	&-step {
		font-weight: 400;
		counter-reset: steps;
		&-label {
			display: block;
			margin: 1.25% 0;
			padding: 0 2.5% 0 0;
			pointer-events: none;
			&::before {
				line-height: 2em;
				display: inline-block;
				width: 2em;
				height: 2em;
				margin-right: .5em;
				content: counter(steps);
				counter-increment: steps;
				text-align: center;
				border-radius: 50%;
				background-color: theme($theme, $prop, "step-unselected");
			}
			&.selected::before {
				background-color: theme($theme, $prop, "step-selected");
			}
			
			@include for("tablet") {
				display: inline-block;
			}
		}
		&-progress {
			appearance: none;
			clear: both;
			width: 100%;
			color: theme($theme, $prop, "step-selected");
			border: none; 
			&::-webkit-progress-bar {
				background: #eee;
				box-shadow: 0 1px 2px rgba(0,0,0,0.2) inset;
				border-radius: 3px;
			}
			&::-webkit-progress-value {
			    background-color: theme($theme, $prop, "step-selected");
			    border-radius: 3px;
			    transition: all 0.25s linear;
			}
			&::-moz-progress-bar {
				background-color: theme($theme, $prop, "step-selected");
			}	
		}
	}
	@at-root {
		[class*="form"] {
			.state {
				@for $i from 1 through $num-steps {
					&:nth-of-type(#{$i}):checked {
						& ~ .form-step > label:nth-of-type(#{$i}) {
							color: theme($theme, "default", "step-selected");
							&::before {
								background: theme($theme, "default", "step-selected");
								color: #fff;
							}
						}
						& ~ .form-fieldset:nth-of-type(#{$i}) {
							display: block;
						}
					}
				}
			}
		}
		/* Custom Themes */
		[class*="#{$prop}"] {
			font: theme($theme, $prop, "form-font");
			:focus:required:invalid {
				background-image: url(#{theme($theme, $prop, "svg-invalid")});
				outline-color: theme($theme, $prop, "validation-valid-background");;
			}
			:required {
				background-image: url(#{theme($theme, $prop, "svg-required")});
			}
			
			:required:valid {
				background-image: url(#{theme($theme, $prop, "svg-valid")});
				border-color: theme($theme, $prop, "validation-valid-background");
				outline-color: theme($theme, $prop, "validation-valid-background");
			}
			.state {
				@for $i from 1 through $num-steps {
					&:nth-of-type(#{$i}):checked {
						& ~ .form-step > label:nth-of-type(#{$i}) {
							color: theme($theme, $prop, "step-selected");
							&::before {
								background: theme($theme, $prop, "step-selected");
								color: #fff;
							}
						}
					}
				}
			}
		}
	}
}

/// Theme-map for form
/// @name form-theme
/// @group settings

$form: (
	"default": (
		"button-background" : #2980b9,
		"button-border-color": transparent,
		"button-border-radius": 0.5rem,
		"button-color": #fff,
		"button-font": #{400 1.25rem "Oswald", sans-serif},
		"button-group-label-margin": 0 0 0.35rem 0,
		"button-group-first-border-radius": .5rem 0 0 .5rem,
		"button-group-last-border-radius": 0 .5rem .5rem 0,
		"button-hover-background": deepskyblue,
		"button-hover-color" : #fff,
		"button-minwidth": 10rem,
		"button-padding": .65em .75em,
		"button-text-transform": none,
		
		"check-border-color": #a8a8a8,
		"check-background": deepskyblue,
		"check-color": #fff,
		
		"fieldset-background": linear-gradient(to bottom, #f0f0f0, #fff),
		"fieldset-border-color": #a8a8a8,
		"fieldset-border-radius" : 0.5rem,
		"fieldset-border-width": 1px,
		
		"form-font": #{300 1rem "Oswald", sans-serif},
		"hr-color": #ccc,
		
		"input-border-color": #a8a8a8,
		"input-border-radius": 0.5rem,
		"input-focus":  0 0 0.5rem #ccc,
		"input-font-size": 1rem,
		"input-margin": 0,
		"input-padding": .75rem 1rem,
		
		"label-color": #333,
		"label-focus": transparent,
		"label-font-size": 1rem,
		"label-margin": 0 0 0.35rem 0,
		
		"legend-background" : #444,
		"legend-color": #fff,
		"legend-font-size": 1.5rem,
		"legend-margin": 0 0 0 2.5%,
		
		"list-margin": 1% 0,
		"list-padding": 0 2.5%,
		
		"placeholder-color": #ccc,
		"placeholder-color-focus" : #ccc,
	
		"range-track-color": lightgrey,
		"range-highlight-color": deepskyblue,
		"range-handle-color": #2980b9,
		"range-label-color": #ccc,
		
		"step-selected": deepskyblue,
		"step-unselected": #ccc,
		
		"svg-invalid": "../svg/invalid.svg",
		"svg-required": "../svg/required.svg",
		"svg-valid": "../svg/valid.svg",
		
		"validation-invalid": #d94a39,
		"validation-valid-background": #196533,
		"validation-valid-color": #fff,
		
		"wrapper-check-padding": 1rem,
		"wrapper-radio-padding": 2.5rem
	),
	"material": (
		"button-background" : #fff,
		"button-border-color": #923222, 
		"button-border-radius": 0,
		"button-color": #923222,
		"button-font": #{400 0.875rem "Roboto", sans-serif},
		"button-group-label-margin": 0 0 1rem 0,
		"button-group-first-border-radius": 0,
		"button-group-last-border-radius": 0,
		"button-hover-background": #923222,
		"button-hover-color" : #fff,
		"button-minwidth": 10rem,
		"button-padding" : .75em 1rem,
		"button-text-transform": uppercase,
		
		"check-border-color": #ccc,
		"check-background": #923222,
		"check-color": #fff,
		
		"fieldset-background": #fff,
		"fieldset-border-color": transparent,
		"fieldset-border-radius" : 0,
		"fieldset-border-width": 0,
		
		"form-font": #{300 1rem "Roboto", sans-serif},
		"hr-color": #ccc,
		
		"input-border-color": transparent,
		"input-border-radius": 0,
		"input-focus": none,
		"input-font-size": 1rem,
		"input-margin": 1rem 0 0 0,
		"input-padding": .75rem 0,
		
		"label-color": #333,
		"label-focus": #923222,
		"label-font-size": 0.875rem,
		"label-margin": 0,
		
		"legend-background" : transparent,
		"legend-color": #923222,
		"legend-margin": 0 0 0 1.25%,
		"legend-font-size": 1.5rem,
		
		"list-margin": 1% 0,
		"list-padding": 0 1.25%,
		
		"placeholder-color": #ddd,
		"placeholder-color-focus" : transparent,

		"range-track-color": #ddd,
		"range-highlight-color": #aaa,
		"range-handle-color": #923222,
		"range-label-color": #ccc,
		
		"step-selected": #923222,
		"step-unselected": #ccc,
		
		"svg-invalid": none,
		"svg-required": none,
		"svg-valid": none,
		
		"validation-invalid": #d94a39,
		"validation-valid-background": #196533,
		"validation-valid-color": #fff,
		
		"wrapper-check-padding": 0.25rem,
		"wrapper-radio-padding": 1rem
	)
);